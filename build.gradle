plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.cadixdev.licenser' version '0.6.0'
}

group 'me.gabytm.minecraft'
version projectVersion(2, 0, 0)

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { name 'Spigot'; url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { name 'NBT API'; url 'https://repo.codemc.org/repository/maven-public/' }
    maven { name 'Config'; url 'https://repo.triumphteam.dev/snapshots' }
    maven { name 'Essentials'; url 'https://repo.essentialsx.net/releases/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.20"
    implementation 'me.mattstudios.utils:matt-framework:1.4.6'
    implementation 'me.mattstudios:triumph-config:1.0.5-SNAPSHOT'
    implementation 'de.tr7zw:item-nbt-api:2.13.2'
    implementation 'net.kyori:adventure-platform-bukkit:4.3.4'
    compileOnly('com.arcaniax:HeadDatabase-API:1.3.2') { transitive = false }
    compileOnly 'com.github.oraxen:oraxen:1.154.1'
    compileOnly 'com.github.LoneDev6:api-itemsadder:3.0.0'
    compileOnly('net.essentialsx:EssentialsX:2.20.1') { transitive = false }
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.bstats:bstats-bukkit:3.0.0'
}

compileJava.options.encoding = "UTF-8"

compileKotlin.kotlinOptions {
    jvmTarget = "1.8"
    javaParameters = true
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    eachFile { expand version: version }
}

license {
    header = project.file('LICENSE')
    include '**/*.kt'
    exclude '**/ServerVersion.kt'
}

shadowJar {
    archiveName("GUIHelper [${project.version}].jar")

    [
        'kotlin'                  : 'kt',
        'org.bstats'              : 'bstats',
        'me.mattstudios.config'   : 'defaults',
        'me.mattstudios.mf'       : 'commands',
        'de.tr7zw.changeme.nbtapi': 'nbtapi'
    ].each { relocate(it.key, 'me.gabytm.minecraft.guihelper.libs.' + it.value) }
}

tasks.register('copyJarToServer', Copy) {
    if (testServerVersion == '') {
        throw new IllegalArgumentException("testServerVersion not provided")
    } else {
        from shadowJar
        into './testServer/' + testServerVersion + '/plugins'
    }
}

private static String projectVersion(int major, int minor, int patch) {
    def buildNumber = System.getenv('BUILD_NUMBER') ?: System.getProperty('BUILD_NUMBER')
    return buildNumber == null ? "$major.$minor.$patch" : "$major.$minor.$patch-$buildNumber"
}
